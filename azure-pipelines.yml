parameters:
  - name: environment
    displayName: Environment
    values:
      - DEV
      - PROD

variables:
  - group: APIM_AUTOMATION
  - ${{ if eq(parameters.environment, 'DEV') }}:
      - group: DEV_SETTINGS
  - ${{ if eq(parameters.environment, 'PROD') }}:
      - group: PROD_SETTINGS

jobs:
- job: APIM_IAC
  timeoutInMinutes: 180
  pool:
    vmImage: ubuntu-latest

  steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'

    - script: |
        npm install -g tfx-cli
      displayName: 'Install TFX CLI'

    - script: |
        npm install -g terraform
      displayName: 'Install Terraform'

    - task: AzureCLI@2
      inputs:
        azureSubscription: $(SERVICE_CONNECTION_AZURE)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo $(terraform --version)
      displayName: 'Check Terraform Version'

    - task: AzureCLI@2
      inputs:
        azureSubscription: $(SERVICE_CONNECTION_AZURE)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          terraform init
      displayName: 'Terraform Init'

    - task: AzureCLI@2
      inputs:
        azureSubscription: $(SERVICE_CONNECTION_AZURE)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          terraform validate
      displayName: 'Terraform Validate'

    - task: AzureCLI@2
      inputs:
        azureSubscription: $(SERVICE_CONNECTION_AZURE)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          terraform plan
      displayName: 'Terraform Plan'

    - task: AzureCLI@2
      inputs:
        azureSubscription: $(SERVICE_CONNECTION_AZURE)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          terraform apply -auto-approve
      displayName: 'Terraform Apply'
